openapi: 3.0.3
info:
  title: Vinyl Recommender - OpenAPI 3.0 specification
  description: |-
    This is a sample ViRe Server based on the OpenAPI 3.0 specification.

  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://api.musicstreaming.com/v1
  - url: https://api.spotify.com/v1/
tags:
  - name: user
    description: Operations about user
  - name: tracks
    description: Operations about tracks
  - name: playlist
    description: Operations about playlists
  - name: links
    description: Operations about linking accounts
  - name: recommend
    description: Operations about preferences and recommendations
paths:
  /tracks:
      get:
        tags: 
          - tracks
        summary: Get a list of tracks
        description: Retrieve a paginated list of available tracks.
        parameters:
          - name: song list
            in: query
            description: song list
            style: form
            explode: true
            schema:
              type: string
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Song'
                
  /tracks/{trackId}:
      get:
        tags: 
          - tracks
        summary: Get a track by ID
        description: Retrieve info about a track.
        parameters:
          - name: trackId
            in: path
            description: song ID
            required: true
            explode: false
            schema:
              type: string
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Song'
          '404':
              description: Song not found
      
  /artist:
      get:
        tags: 
          - artist
        summary: Get a list of artists
        description: Retrieve a paginated list of artists.
        parameters:
          - name: artist list
            in: query
            description: artist list
            style: form
            explode: true
            schema:
              type: string
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Artist'
                
  /artist/{artistId}:
    get:
      tags: 
        - artist
      summary: Get an artist by ID
      description: Retrieve info about an artist.
      parameters:
        - name: artistId
          in: path
          description: artist ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '404':
            description: Artist not found
            
  /album:
      get:
        tags: 
          - album
        summary: Get a list of albums
        description: Retrieve a paginated list of albums.
        parameters:
          - name: album list
            in: query
            description: album list
            style: form
            explode: true
            schema:
              type: string
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Album'
                
  /album/{albumId}:
    get:
      tags: 
        - album
      summary: Get an album by ID
      description: Retrieve info about an album.
      parameters:
        - name: albumId
          in: path
          description: album ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '404':
            description: Album not found
            
  /playlist:
    get:
      tags:
        - playlist
      summary: Get a list of playlists
      description: Retrieve a list of available playlists.
      parameters:
        - name: playlist
          in: query
          description: playlist name
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
    post:
      tags:
        - playlist
      summary: Create a playlist
      description: Create a playlist
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
        '404':
          description: Error while creating a playlist
  
  /playlist/{playlistId}:
    get:
      tags:
        - playlist
      summary: Get a playlist
      description: Retrieve specific playlist info.
      parameters:
        - name: playlistId
          in: path
          description: ID of the playlist
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        '404':
              description: Playlist not found
    put:
      tags:
        - playlist
      summary: Update a playlist
      description: Update playlist info.
      parameters:
        - name: playlistId
          in: path
          description: ID of the playlist
          required: true
          schema:
            type: string
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        '404':
              description: Playlist not found
    delete:
      tags:
        - playlist
      summary: Delete a playlist
      description: Delete the specified playlist.
      parameters:
        - name: playlistId
          in: path
          description: ID of the playlist
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: Playlist not found
                    
  /playlist/{playlistId}/tracks:
    get:
      tags:
        - playlist
      summary: Get tracks in a playlist
      description: Retrieve the tracks in a specific playlist.
      parameters:
        - name: playlistId
          in: path
          description: ID of the playlist
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '404':
          description: Playlist not found
          
  /playlist/{playlistId}/{songId}:
    put:
      tags:
        - playlist
      summary: Add a song in a playlist
      description: Add songs in a specific playlist.
      parameters:
        - name: playlistId
          in: path
          description: ID of the playlist
          required: true
          schema:
            type: integer
        - name: songId
          in: path
          description: ID of the song
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '404':
          description: Playlist or song not found
    delete:
      tags:
        - playlist
      summary: Delete a song in a playlist
      description: Delete songs in a specific playlist.
      parameters:
        - name: playlistId
          in: path
          description: ID of the playlist
          required: true
          schema:
            type: integer
        - name: songId
          in: path
          description: ID of the song
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '404':
          description: Playlist or song not found
  
  /linkLastfm:
    post:
      tags:
        - links
      summary: Link Last.fm account
      responses:
        '200':
          description: Successful response
        '404':
          description: Linking account failed
          
  /linkDiscogs:
    post:
      tags:
        - links
      summary: Link Discogs account
      responses:
        '200':
          description: Successful response
        '404':
          description: Linking account failed
      
  /preferences:
    post:
      tags:
        - recommend
      summary: Add preferences in a form
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preferences'
        required: true
      responses:
        '200':
          description: Successful response
        '404':
          description: Processing preferences failed
    put:
      tags:
        - recommend
      summary: Update preferences in a form
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preferences'
        required: true
      responses:
        '200':
          description: Successful response
        '404':
          description: Processing preferences failed
  
  /recommend:
    get:
      tags:
          - recommend
      summary: Get recommendations based on the users' preferences
      parameters:
      - name: preferences
        in: query
        description: The preferences introduced by the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/Playlist'
                - type: array
                  items:
                    $ref: '#/components/schemas/Song'
                - type: array
                  items:
                    $ref: '#/components/schemas/Artist'
                - type: array
                  items:
                    $ref: '#/components/schemas/Album'
        '404':
          description: Processing recommendations failed
  
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
                
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
          
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  
  /user/{username}/playlists:
    get:
      tags:
        - user
      summary: Get an user's created playlists
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
          
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
          
components:
  schemas:
    Playlist:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: shazam
        date_created:
          type: string
          format: date
          example: "2023-12-02"
        date_modified:
          type: string
          format: date
          example: "2023-12-02"
        songs:
          type: array
          items: 
            $ref: '#/components/schemas/Song'
    Song:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: 'spoonman'
        artist:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        genre:
          type: string
          example: 'rock'
        duration:
          type: string
          example: '4:20'
        album:
          $ref: '#/components/schemas/Album'
    Artist:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: 'soundgarden'
        debut_year:
          type: integer
          example: 1987
        artist_type:
          type: string
          example: 'band'
        genre:
          type: string
          example: 'rock'
    Album:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: 'superunkown'
        year:
          type: integer
          example: 1994
        genre:
          type: string
          example: 'rock'
        artist_name:
          $ref: '#/components/schemas/Artist'
    # Genre:
    #   type: string
    #   example: 'rock'
    Purchases:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: 'superunkown'
        year:
          type: integer
          example: 1994
        genre:
          type: string
          example: 'rock'
        artist_name:
          $ref: '#/components/schemas/Artist'
    Preferences:
      type: object
      properties:
        genres:
          type: array
          items:
            type: string
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Song:
      description: Song object used for playlist creation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Song'
        application/xml:
          schema:
            $ref: '#/components/schemas/Song'
    Playlist:
      description: Playlist object added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Playlist'
        application/xml:
          schema:
            $ref: '#/components/schemas/Playlist'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    spotifyapi_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.spotify.com/authorize
          scopes:
            read-private: Access to your Spotify account details
            read-public: Access to your saved tracks and albums
    api_key:
      type: apiKey
      name: api_key
      in: header